@startuml

skinparam class {
  BackgroundColor #ebebeb
  ArrowColor      #333
  BorderColor     #333
}

skinparam lineType ortho

package psr.log {
  interface psr.log.LoggerInterface {
    + emergency (message: str, context: dict = None) -> None
    + alert (message: str, context: dict = None) -> None
    + critical (message: str, context: dict = None) -> None
    + error (message: str, context: dict = None) -> None
    + warning (message: str, context: dict = None) -> None
    + notice (message: str, context: dict = None) -> None
    + info (message: str, context: dict = None) -> None
    + debug (message: str, context: dict = None) -> None
    ---
    + log (level: str, message: str, context: dict = None) -> None
  }
}

package md.log {
  interface RecordProcessorInterface {
    + process(record: dict) -> dict
  }

  interface HandlerInterface {
    + handle(record: dict) -> dict
  }

  class PidRecordProcessor implements RecordProcessorInterface {
    + process(record: dict) -> dict
  }

  class DefaultHandler implements HandlerInterface {
    - record_format: str
    - date_format: str
    - filename: str
    ---
    + handle(record: dict) -> None
  }

  class Logger implements psr.log.LoggerInterface {
    - name: str
    - handler_list: typing.List[HandlerInterface] = None
    - record_processor_list: typing.List[RecordProcessorInterface] = None
    ---
    + emergency (message: str, context: dict = None) -> None
    + alert (message: str, context: dict = None) -> None
    + critical (message: str, context: dict = None) -> None
    + error (message: str, context: dict = None) -> None
    + warning (message: str, context: dict = None) -> None
    + notice (message: str, context: dict = None) -> None
    + info (message: str, context: dict = None) -> None
    + debug (message: str, context: dict = None) -> None
    ---
    + log (level: str, message: str, context: dict = None) -> None
  }

  Logger *-> HandlerInterface : "1:n"
  Logger o-> RecordProcessorInterface : "1:1"
}

@enduml
